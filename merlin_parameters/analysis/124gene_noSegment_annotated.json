{
    "analysis_tasks": [
        {
            "task": "FiducialCorrelationWarp",
            "module": "merlin.analysis.warp",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps",
            "parameters": {
                "highpass_sigma": 5,
                "write_fiducial_images": false,
                "write_aligned_images": false
            }
        }, 
        {
            "task": "DeconvolutionPreprocess",
            "module": "merlin.analysis.preprocess",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps",
            "parameters": {
                "warp_task": "FiducialCorrelationWarp",
                "highpass_sigma": 3,
                "decon_sigma": 1.5,
                "decon_iterations": 10,
                "decon_filter_size": 9 
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps",
            "analysis_name": "Optimize1",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize2",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize1",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize3",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize2",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize4",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize3",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize5",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize4",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize6",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize5",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize7",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize6",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize8",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize7",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize9",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize8",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps and fov_per_iteration below",
            "analysis_name": "Optimize10",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 50,
                "previous_iteration": "Optimize9",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "Decode",
            "module": "merlin.analysis.decode",
            "_comment": "Scale with n_rounds, n_channels, n_zsteps, this step is one of the time demanding step",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize10",
                "global_align_task": "SimpleGlobalAlignment",
                "minimum_area": 1,
                "lowpass_sigma": 0.6,
                "crop_width": 80,
                "distance_threshold":0.65,
                "write_decoded_images":false
            }
        },
        {
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "_comment": "this step scale with n_fov, memory demanding",
            "parameters": {
                "global_align_task": "SimpleGlobalAlignment",
                "warp_task": "FiducialCorrelationWarp",
                "data_channels": ["bit1", "bit2", "bit3", "bit4", "bit5", "bit6", "bit7", "bit8", "bit9", "bit10", "bit11", "bit12", "bit13", "bit14", "bit15", "bit16", "DAPI"]
            }
        },
        {
            "task": "GenerateAdaptiveThreshold",
            "module": "merlin.analysis.filterbarcodes",
            "_comment": "this step scales with the total size of Decode outputs",
            "parameters": {
                "decode_task": "Decode",
                "run_after_task": "Decode"
            }
        }, 
        {
            "task": "AdaptiveFilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "_comment": "this step is generally quite fast",
            "parameters": {
                "misidentification_rate": 0.05,
                "decode_task": "Decode",
                "adaptive_task": "GenerateAdaptiveThreshold"
            }
        }, 
        {
            "task": "PlotPerformance",
            "module": "merlin.analysis.plotperformance",
            "_comment": "this step needs long time to excete, maybe change its dependencies to only start at the very end",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize10",
                "decode_task": "Decode",
                "filter_task": "AdaptiveFilterBarcodes"
            }
        },
        {
            "task": "SimpleGlobalAlignment",
            "module": "merlin.analysis.globalalign",
            "_comment": "this step is generally quite fast"
        },
        {
            "task": "ExportBarcodes",
            "module": "merlin.analysis.exportbarcodes",
            "_comment": "this step scales with the outputs from AdaptiveFilterBarcodes",
            "parameters": {
                "filter_task": "AdaptiveFilterBarcodes",
                "columns": ["barcode_id", "global_x", "global_y", "global_z",
                    "x", "y", "fov", "cell_index"],
                "exclude_blanks": false
            }
        }
    ]

}
